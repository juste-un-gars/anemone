#!/bin/bash
set -e

GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
RED='\033[0;31m'
NC='\033[0m'

echo -e "${CYAN}"
echo "‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó"
echo "‚ïë     ü™∏  ANEMONE - Initialisation      ‚ïë"
echo "‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó"
echo -e "${NC}"
echo ""

echo -e "${BLUE}[1/5]${NC} V√©rification des d√©pendances..."
if ! command -v docker &> /dev/null; then
    echo -e "${RED}‚ùå Docker non install√©${NC}"
    exit 1
fi
if ! command -v docker-compose &> /dev/null && ! docker compose version &> /dev/null; then
    echo -e "${RED}‚ùå Docker Compose non install√©${NC}"
    exit 1
fi
echo -e "${GREEN}‚úì Docker install√©${NC}"
echo -e "${GREEN}‚úì Docker Compose install√©${NC}"
echo ""

echo -e "${BLUE}[2/5]${NC} Cr√©ation de la structure..."
mkdir -p config/{wireguard,wg_confs,ssh,samba}
mkdir -p data backup backups logs services/{restic,api}
echo -e "${GREEN}‚úì Structure cr√©√©e${NC}"
echo ""

echo -e "${BLUE}[3/5]${NC} G√©n√©ration cl√©s WireGuard..."
if [ ! -f config/wireguard/private.key ]; then
    # M√©thode 1: Utiliser wg si disponible sur le host (m√©thode officielle)
    if command -v wg &> /dev/null; then
        wg genkey | tee config/wireguard/private.key | wg pubkey > config/wireguard/public.key
        chmod 600 config/wireguard/private.key
        chmod 644 config/wireguard/public.key
        echo -e "${GREEN}‚úì Cl√©s WireGuard g√©n√©r√©es (via wg)${NC}"
    # M√©thode 2: Utiliser l'image Docker WireGuard avec entrypoint sp√©cifique
    else
        echo -e "${YELLOW}‚ö† 'wg' non disponible sur le host, utilisation de Docker...${NC}"
        # G√©n√©rer la cl√© priv√©e (contourner l'entrypoint par d√©faut)
        docker run --rm --entrypoint wg linuxserver/wireguard:latest genkey > config/wireguard/private.key 2>/dev/null || {
            # Si √ßa √©choue, utiliser Python comme fallback
            echo -e "${YELLOW}   ‚Üí Fallback sur Python...${NC}"
            python3 -c "import base64, os; print(base64.b64encode(os.urandom(32)).decode())" > config/wireguard/private.key
        }

        # G√©n√©rer la cl√© publique correspondante
        docker run --rm --entrypoint wg -i linuxserver/wireguard:latest pubkey < config/wireguard/private.key > config/wireguard/public.key 2>/dev/null || {
            # Si √ßa √©choue aussi, cr√©er un placeholder
            echo "# Cl√© publique sera g√©n√©r√©e au d√©marrage du conteneur" > config/wireguard/public.key
        }

        chmod 600 config/wireguard/private.key
        chmod 644 config/wireguard/public.key
        echo -e "${GREEN}‚úì Cl√©s WireGuard g√©n√©r√©es${NC}"
    fi

    # Cr√©er le fichier wg0.conf avec les cl√©s g√©n√©r√©es
    echo -e "${BLUE}   ‚Üí Cr√©ation de wg0.conf...${NC}"
    PRIVATE_KEY=$(cat config/wireguard/private.key)
    cat > config/wg_confs/wg0.conf <<EOF
[Interface]
PrivateKey = ${PRIVATE_KEY}
Address = 10.8.0.1/24
ListenPort = 51820
PostUp = iptables -A FORWARD -i %i -j ACCEPT; iptables -A FORWARD -o %i -j ACCEPT; iptables -t nat -A POSTROUTING -o eth+ -j MASQUERADE
PostDown = iptables -D FORWARD -i %i -j ACCEPT; iptables -D FORWARD -o %i -j ACCEPT; iptables -t nat -D POSTROUTING -o eth+ -j MASQUERADE

# Ajoutez vos peers ici avec le format suivant :
# [Peer]
# PublicKey = CLE_PUBLIQUE_DU_PEER
# AllowedIPs = 10.8.0.2/32
# Endpoint = peer.duckdns.org:51820
# PersistentKeepalive = 25
EOF
    chmod 600 config/wg_confs/wg0.conf
    echo -e "${GREEN}   ‚úì wg0.conf cr√©√©${NC}"
else
    echo -e "${YELLOW}‚ö† Cl√©s d√©j√† pr√©sentes${NC}"
    # V√©rifier si wg0.conf existe, sinon le cr√©er
    if [ ! -f config/wg_confs/wg0.conf ]; then
        echo -e "${BLUE}   ‚Üí Cr√©ation de wg0.conf avec cl√©s existantes...${NC}"
        PRIVATE_KEY=$(cat config/wireguard/private.key)
        cat > config/wg_confs/wg0.conf <<EOF
[Interface]
PrivateKey = ${PRIVATE_KEY}
Address = 10.8.0.1/24
ListenPort = 51820
PostUp = iptables -A FORWARD -i %i -j ACCEPT; iptables -A FORWARD -o %i -j ACCEPT; iptables -t nat -A POSTROUTING -o eth+ -j MASQUERADE
PostDown = iptables -D FORWARD -i %i -j ACCEPT; iptables -D FORWARD -o %i -j ACCEPT; iptables -t nat -D POSTROUTING -o eth+ -j MASQUERADE

# Ajoutez vos peers ici avec le format suivant :
# [Peer]
# PublicKey = CLE_PUBLIQUE_DU_PEER
# AllowedIPs = 10.8.0.2/32
# Endpoint = peer.duckdns.org:51820
# PersistentKeepalive = 25
EOF
        chmod 600 config/wg_confs/wg0.conf
        echo -e "${GREEN}   ‚úì wg0.conf cr√©√©${NC}"
    fi
fi
echo ""

echo -e "${BLUE}[4/5]${NC} G√©n√©ration cl√©s SSH..."
if [ ! -f config/ssh/id_rsa ]; then
    ssh-keygen -t rsa -b 4096 -f config/ssh/id_rsa -N "" -C "restic@anemone" -q
    chmod 600 config/ssh/id_rsa
    chmod 644 config/ssh/id_rsa.pub
    touch config/ssh/authorized_keys
    chmod 600 config/ssh/authorized_keys
    echo -e "${GREEN}‚úì Cl√©s SSH g√©n√©r√©es${NC}"
else
    echo -e "${YELLOW}‚ö† Cl√©s d√©j√† pr√©sentes${NC}"
fi
echo ""

echo -e "${BLUE}[5/5]${NC} Configuration..."
if [ ! -f config/config.yaml ]; then
    [ -f config/config.yaml.example ] && cp config/config.yaml.example config/config.yaml
    echo -e "${GREEN}‚úì config.yaml cr√©√©${NC}"
else
    echo -e "${YELLOW}‚ö† config.yaml pr√©sent${NC}"
fi

if [ ! -f .env ]; then
    [ -f .env.example ] && cp .env.example .env
    echo -e "${GREEN}‚úì .env cr√©√©${NC}"
else
    echo -e "${YELLOW}‚ö† .env pr√©sent${NC}"
fi
echo ""

echo -e "${GREEN}‚úÖ Initialisation termin√©e !${NC}"
echo ""
echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
echo -e "${CYAN}üìã INFORMATIONS √Ä PARTAGER${NC}"
echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
echo ""
echo -e "${YELLOW}üîë Cl√© publique WireGuard :${NC}"
cat config/wireguard/public.key
echo ""
echo -e "${YELLOW}üîë Cl√© publique SSH :${NC}"
cat config/ssh/id_rsa.pub
echo ""
echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
echo ""
echo -e "${CYAN}üìù PROCHAINES √âTAPES${NC}"
echo ""
echo "1. √âditez .env (mots de passe)"
echo "2. √âditez config/config.yaml"
echo "3. Lancez: ${YELLOW}docker-compose up -d${NC}"
echo "4. Configurez la cl√©: ${YELLOW}http://localhost:3000/setup${NC}"
echo "5. ${RED}SAUVEGARDEZ LA CL√â DANS BITWARDEN !${NC}"
echo ""
